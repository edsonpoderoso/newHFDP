/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.emoreira.hfd;

import net.emoreira.hfd.xml.XMLModule;
import com.google.common.base.Optional;
import com.google.inject.Guice;
import com.google.inject.Injector;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import net.emoreira.hfd.model.Architecture;
import net.emoreira.hfd.model.Catalog;
import net.emoreira.hfd.model.Hfd;
import net.emoreira.hfd.palette.CategoryNodeFactory;
import net.emoreira.hfd.palette.HfdPaletteActions;
import net.emoreira.hfd.palette.PaletteModule;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.netbeans.spi.palette.PaletteController;
import org.netbeans.spi.palette.PaletteFactory;
import org.openide.awt.UndoRedo;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.IOProvider;
import org.openide.windows.OutputWriter;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
        displayName = "#LBL_hfd_VISUAL",
        iconBase = "net/emoreira/hfd/HFD.png",
        mimeType = "application/hdf+xml",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "hfdVisual",
        position = 2000
)
@Messages("LBL_hfd_VISUAL=Visual")
public final class HFDVisualElement extends JPanel implements MultiViewElement {

    private HFDDataObject obj;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;
    private Injector injector;
    private Hfd hfd;
    private Catalog catalog;
    private Architecture architecture;
    private FileHandler fileHandler;
    private boolean modified;
    private Node paletteRootNode;
    private InstanceContent localLookupContent;
    private AbstractLookup localLookup;

    public HFDVisualElement(Lookup lkp) {
        injector = Guice.createInjector(new HFDServiceModule(),
                new XMLModule(),
                new PaletteModule());
        fileHandler = injector.getInstance(FileHandler.class);
        obj = lkp.lookup(HFDDataObject.class);
        assert obj != null;
        initComponents();
        LookupInit();
    }

    private void LookupInit() {
        if (localLookup == null) {
            localLookupContent = new InstanceContent();
            localLookup = new AbstractLookup(localLookupContent);
        }
    }

    @Override
    public String getName() {
        return "hfdVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return callback.createDefaultActions();
    }

    @Override
    public Lookup getLookup() {
        return new ProxyLookup(new Lookup[]{
            obj.getLookup(),
            localLookup, //TO ADD Stage lookup
        });
    }

    @Override
    public void componentOpened() {
        //example of naming the component in bold face
        callback.getTopComponent().setHtmlDisplayName("<html><body><strong>" + obj.getName() + "</strong></body></html>");

        //Read the Hfd file to the Hfd object;
        Optional<Hfd> temp = fileHandler.readFile(obj.getPrimaryFile());
        if (temp.isPresent()) {
            hfd = temp.get();
            catalog = hfd.getCatalog();
            architecture = hfd.getArchitecture();
            this.initPalette();
        } else {
            //TODO stop loading this component.
        }
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    private void rundownTest() {
        OutputWriter ow = IOProvider.getDefault().getStdOut();
        ow.print(hfd.toString());
    }

    private void setModified(boolean modified) {
        this.modified = modified;
        AdjustEditorNameApperance();
        //TODO create a savable
    }

    private void AdjustEditorNameApperance() {
        if (modified) {
            callback.getTopComponent().setHtmlDisplayName("<html><body><strong>" + obj.getName() + "</strong></body></html>");
        } else {
            callback.getTopComponent().setHtmlDisplayName("<html><body>" + obj.getName() + "</body></html>");
        }
    }

    private void initPalette() {
        paletteRootNode = new AbstractNode(Children.create(new CategoryNodeFactory(catalog), true));
        PaletteController palette = PaletteFactory.createPalette(paletteRootNode, new HfdPaletteActions());
        localLookupContent.add(palette);
    }

}
