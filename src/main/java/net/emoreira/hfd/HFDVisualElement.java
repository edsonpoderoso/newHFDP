/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.emoreira.hfd;

import net.emoreira.hfd.xml.XMLModule;
import com.google.common.base.Optional;
import com.google.inject.Guice;
import com.google.inject.Injector;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import net.emoreira.hfd.model.Architecture;
import net.emoreira.hfd.model.Binding;
import net.emoreira.hfd.model.Catalog;
import net.emoreira.hfd.model.Component;
import net.emoreira.hfd.model.Hfd;
import net.emoreira.hfd.model.Subarch;
import net.emoreira.hfd.palette.CategoryNodeFactory;
import net.emoreira.hfd.palette.HfdPaletteActions;
import net.emoreira.hfd.palette.PaletteModule;
import net.emoreira.hfd.stage.Stage;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.netbeans.spi.actions.AbstractSavable;
import org.netbeans.spi.palette.PaletteController;
import org.netbeans.spi.palette.PaletteFactory;
import org.openide.awt.UndoRedo;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.IOProvider;
import org.openide.windows.OutputWriter;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

@MultiViewElement.Registration(
        displayName = "#LBL_hfd_VISUAL",
        iconBase = "net/emoreira/hfd/HFD.png",
        mimeType = "application/hdf+xml",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "hfdVisual",
        position = 2000
)
@Messages("LBL_hfd_VISUAL=Visual")
public final class HFDVisualElement extends JPanel implements MultiViewElement {

    private HFDDataObject obj;
    private final JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;
    private final Injector injector;
    private Hfd hfd;
    private Catalog catalog;
    private Architecture architecture;
    private final FileHandler fileHandler;
    private boolean modified;
    private Node paletteRootNode;
    private InstanceContent localLookupContent;
    private AbstractLookup localLookup;
    private JComponent sceneView;
    private final Stage stage = new Stage();
    
    private final ChangeListener cl = new ChangeListener() {
        @Override
        public void stateChanged(ChangeEvent e) {
            stage.validate();
            sceneView.repaint();
            if (getLookup().lookup(MySavable.class) == null) {
                localLookupContent.add(new MySavable());
            }
        }
    };
    private UndoRedo undoRedo;

    public HFDVisualElement(Lookup lkp) {
        injector = Guice.createInjector(new HFDServiceModule(),
                new XMLModule(),
                new PaletteModule());
        fileHandler = injector.getInstance(FileHandler.class);
        obj = lkp.lookup(HFDDataObject.class);
        assert obj != null;
        initComponents();
        LookupInit();
    }

    private void LookupInit() {
        if (localLookup == null) {
            localLookupContent = new InstanceContent();
            localLookup = new AbstractLookup(localLookupContent);
        }
    }

    private void initEngineComponents() {
        sceneView = stage.createView();
        jScrollPane1.setViewportView(sceneView);
    }

    public void setDocumentOnScene() {

        List<Subarch> subArchs = architecture.getSubarch();
        List<Binding> bindings = architecture.getBinding();
        for (Subarch s : subArchs) {
            stage.myAddNode(s);
            List<Component> components = s.getComponent();
            for (Component c : components) {
                stage.myAddNode(c);
            }
        }

        for (Binding b : bindings) {
            stage.myAddEdge(b);
        }
        stage.ready();
    }

    @Override
    public String getName() {
        return "hfdVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return callback.createDefaultActions();
    }

    @Override
    public Lookup getLookup() {
        return new ProxyLookup(new Lookup[]{
            //obj.getLookup(),
            localLookup,
            stage.getLookup()
        });
    }

    @Override
    public void componentOpened() {
        //example of naming the component in bold face
        callback.getTopComponent().setHtmlDisplayName("<html><body>" + obj.getName() + "</body></html>");
        WindowManager.getDefault().findTopComponent("properties").open();

        //Read the Hfd file to the Hfd object;
        Optional<Hfd> temp = fileHandler.readFile(obj.getPrimaryFile());
        if (temp.isPresent()) {
            hfd = temp.get();
            catalog = hfd.getCatalog();
            architecture = hfd.getArchitecture();
            this.initPalette();
            initEngineComponents();
            setDocumentOnScene();
            undoRedo = stage.getUndoRedo();
            undoRedo.addChangeListener(cl);
            stage.setCallback(callback);
        } else {
            //TODO stop loading this component.
        }
    }

    @Override
    public void componentClosed() {
        MySavable s = localLookup.lookup(MySavable.class);
        if (s != null) {
            localLookupContent.remove(s);
            s.disable();
        }
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return undoRedo;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    private void rundownTest() {
        OutputWriter ow = IOProvider.getDefault().getStdOut();
        ow.print(hfd.toString());
    }

    private void setModified(boolean modified) {
        this.modified = modified;
        //AdjustEditorNameApperance();
        //TODO create a savable
    }
    
    
    
//    private void AdjustEditorNameApperance() {
//        if (modified) {
//            callback.getTopComponent().setHtmlDisplayName("<html><body><strong>" + obj.getName() + "</strong></body></html>");
//        } else {
//            callback.getTopComponent().setHtmlDisplayName("<html><body>" + obj.getName() + "</body></html>");
//        }
//    }
    
    /**
     * Initializes the side palette
     */
    private void initPalette() {
        paletteRootNode = new AbstractNode(Children.create(new CategoryNodeFactory(catalog), true));
        PaletteController palette = PaletteFactory.createPalette(paletteRootNode, new HfdPaletteActions());
        localLookupContent.add(palette);
    }
    
    private class MySavable extends AbstractSavable {

        MySavable() {
            super();
            register();
        }

        @Override
        protected String findDisplayName() {
            return obj.getName() +"."+ obj.getPrimaryFile().getExt();
        }

        @Override
        protected void handleSave() throws IOException {
            Set<?> elements = stage.getObjects();
            Set<Subarch> subArchs = new HashSet<>();
            Set<Binding> bindings = new HashSet<>();
            for (Object e : elements) {
                if (e instanceof Subarch) {
                    subArchs.add((Subarch) e);
                    continue;
                }
                if (e instanceof Binding) {
                    bindings.add((Binding) e);
                }
            }
            architecture.getBinding().clear();
            architecture.getSubarch().clear();
            
            architecture.getSubarch().addAll(subArchs);
            architecture.getBinding().addAll(bindings);

            fileHandler.writeFile(hfd, obj.getPrimaryFile());
            HFDVisualElement.this.localLookupContent.remove(this);
            setModified(false);
        }

        @Override
        public boolean equals(Object o) {
            if (o instanceof MySavable) {
                return ((MySavable) o).mve() == this.mve();
            }
            return false;
        }

        private HFDVisualElement mve() {
            return HFDVisualElement.this;
        }

        @Override
        public int hashCode() {
            return mve().hashCode();
        }

        private void disable() {
            unregister();
        }
    }
}
